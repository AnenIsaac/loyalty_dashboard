// middleware.ts (simplified version to fix auth loop)
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })

  // Skip middleware for non-page requests and static files
  const isPageRequest = req.nextUrl.pathname.match(/\.[^/]+$/) === null
  if (!isPageRequest) {
    return res
  }

  // Define auth routes
  const authRoutes = ['/auth/login', '/auth/signup', '/auth/forgot-password', '/auth/callback']
  const publicRoutes = ['/']
  const isAuthRoute = authRoutes.some(route => req.nextUrl.pathname.startsWith(route))
  const isPublicRoute = publicRoutes.includes(req.nextUrl.pathname)

  try {
    // Quick auth check with increased timeout
    const authPromise = supabase.auth.getUser()
    const timeoutPromise = new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Auth timeout')), 5000)
    )
    
    const { data: { user }, error: authError } = await Promise.race([
      authPromise, 
      timeoutPromise
    ]) as any

    // Handle authentication errors or missing user
    if (authError || !user) {
      console.log('Auth validation failed:', authError?.message || 'No user found')
      
      // Allow access to auth routes and public routes only
      if (!isAuthRoute && !isPublicRoute) {
        const redirectUrl = new URL('/auth/login', req.url)
        redirectUrl.searchParams.set('redirectTo', req.nextUrl.pathname)
        return NextResponse.redirect(redirectUrl)
      }
      
      return res
    }

    // User is authenticated
    console.log('Middleware - Authenticated user access:', {
      userId: user.id,
      pathname: req.nextUrl.pathname
    })

    // If trying to access auth routes while authenticated, redirect to reports
    if (isAuthRoute) {
      return NextResponse.redirect(new URL('/reports', req.url))
    }

    // Skip business check for business setup route
    if (req.nextUrl.pathname.startsWith('/auth/business-setup')) {
      return res
    }

    // Quick business check with timeout
    try {
      const businessPromise = supabase
        .from('businesses')
        .select('id')
        .eq('user_id', user.id)
        .single()
      
      const businessTimeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Business check timeout')), 3000)
      )

      const { data: business } = await Promise.race([
        businessPromise,
        businessTimeoutPromise
      ]) as any

      // Redirect to business setup if no business exists
      if (!business) {
        return NextResponse.redirect(new URL('/auth/business-setup', req.url))
      }
    } catch (businessError) {
      console.log('Business check failed, allowing access:', businessError)
      // Allow access even if business check fails to prevent loops
    }

    return res

  } catch (error) {
    console.log('Middleware error:', error)
    
    // On any error, allow access to prevent loops
    // Client-side auth will handle the actual authentication
    return res
  }
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|public/|api/|_next/).*)',
  ],
}
